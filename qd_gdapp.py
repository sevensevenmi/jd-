"""
const $ = new Env("高德打车APP测试");
高德打车APP测试

cron:
0 7 * * * qd_gdapp.py
"""



import requests

headers = {
    'Host': 'm5.amap.com',
    'Connection': 'keep-alive',
    'Content-Length': '3805',
    'asac': '2A21B23WR2ZOZGOT2P15G8',
    'Origin': 'https://dache.amap.com',
    'x-mini-wua': '140#3NQDIy86zzFfrzo2j82+M3sjsUDYPESZ5pxLxSu2DJy85Bdi02U7jlZUCXyXjWKBBNyJZE3pWRSMcPI3e3DrLRPWOxB0sG2pkdox4DY3IGLgmZXIdJUYCux43zLYsdgLzTCa6e8etVqdeMVIEFQNSVH15UmBKnfUGhqE4cwqWVe2gg4XqQD/a2LEsGXxLcgqlbzxkJyXXPSOzzcSzOwpl3MzzPzbVXlqUzzz2chzb6rBxQ+JXUG9062dpAbibT2Pnbu4BxkL5RHuvb1ifDOpHPk/xVM0wyXg+1S+cP5zWFuH1FUSmZbARU7co1TJtnpqftXm0DsxDSyDpQseHMGrozjdDaArLE3O/tpC9uq+I3luzHOb2XHDqCI7xDDnyLCql1Rz2KN+VtkB0bzbcO02lp5hz4siVu9XwzDNLPc+EB0GtFrbLZSRlES+zPriKlJ/HFrx22V+ZLk/UWri2XU3lTrxzPzVo1vSONdOHaU+WFtTI267wOPmhF8Lb1t1AGAMJzaUhlSZ37eoVlUxWNYZ3kdrPbXH9vKox3UM0WZzHy952ETdGvZ24J05ld6D0PjMuIS6Hrko1MAYTIfF24usj1FOk7gPacPlSk76CP/E2X9708F8lzU2dmcn/zHo16V9v7ImfYmBVuZDnR/5Abje9kacRdt8EnwRhNbYPZ2vdMolMDKWu3BqUrGxw7o1JWJ+5T+5uRaBfr+C/uTZugOfkcqcMf+6w9GpR82ilW8BtnxERzbFIpemRQivA00xACq6bsTvRoZOTWjm5LME1MfM3mMogMdMZm72uZb7vMCBa9fn17C8gKqXK4BZ+Kf1up7pV3XpLr0LVaaIsew0abR8R7GJcNVxgdZY5g45qEgmctZ3i6QmhFL1+S/xUSf3FUKnrKzGA9UT5pnPS2seGyAZKdKpNaJ7He7Wm3sDJa7Qn341ENJzrAfSL+EZ3nQZKPNn5pmYzuqvxrNlhzODDUJKIfKpdSo/CfX0QvbuIc/SME/k2AqjoxrGO2905BgS4sdDw4agOD50duljMlul1iT3Eu/eaAJIGK+CohqCY+7aKBhKKAjXQMc3ZFEzAXSMojEpnnJBGRRk9d7WYfkcXv8OR7JpM/HQd0VtaqdtogANvW7GAFUIVpOF9kOYdZfptG8q+WFGbag2IW5hv7rbB75RPTBiBC88fCZPTfxsPfUUF0mSlRXhcE+WmkaCRgAKKEq8lw6M6fKFNwGtIOKvkZNt+VcxlXhGEMi7QOTKToeQ+IqLSz8IRj99fFHQAtA0wrIEsTEdSHXUa6/JHBXUTFOsiQso3OUmeXsf/SYq',
    'User-Agent': 'Mozilla/5.0 (Linux; U; Android 12; zh-CN; M2011K2C Build/SKQ1.220119.001) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/69.0.3497.100 UWS/3.22.2.34 Mobile Safari/537.36 AliApp(amap/11.15.0.2912) amap/11.15.0.2912 Mac=+r9Xi42aRLhLNTuVEC2Qi9lQNbtFZKEKga8UcUlLZ0VVL86ySZ9icg7XUJhaAm+0g3GwY4YpyejLIU0qSM6GkwPwFEzt1nttDbEcTCRK2xSIta92jUHl5qA8KYi0HaTD3r5ZP4dbMXg218vfQFODYFs74RLTaSK1HDJ5BTu8XSNFwDRHy8HhFA==',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Accept': 'application/json, text/plain, */*',
    'sessionid': '5jvmovpezjgpdg7htmd2xedh76hxmu3g',
    'Referer': 'https://dache.amap.com/amap_mini_c2_sharedtrip/taxi/index.html?',
    'Accept-Encoding': 'gzip, deflate',
    'Accept-Language': 'zh-CN,en-US;q=0.9',
    'X-Requested-With': 'com.autonavi.minimap',
}

params = (
    ('in', 'ydf4TGBSCkrLSuzsLZFLcGo2NCq4HNV4kEjodsXlR6q/UmAZwjQYR8QI9LVvR2pTeGxIJFhnahZs1KG0'),
    ('xck', 'gje+hxaEtSAuHbrCmo5aoNi/s8ECkzDbtNF53iMrdty82nXAPPs8QNg7IvrXpZrl/BL+dD5geroLCVY6je7zQH7TXkCJFQix+M26lDwLdNLeYTnARtw61u5m6EbMfbQkBS661KG3jkkthv2nCOyMUUrgINr9J2jGwa6Pe49j/zI='),
    ('xck_channel', 'default'),
)

data = {
  'in': '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'
}
def sign():
    response = requests.post('https://m5.amap.com/ws/alice/activity/daily_sign/do_sign', headers=headers, params=params, data=data)

    # Note: original query string below. It seems impossible to parse and
    # reproduce query strings 100% accurately so the one below is given
    # in case the reproduced version is not "correct".
    #response = requests.post('https://m5.amap.com/ws/alice/activity/daily_sign/do_sign?in=ydf4TGBSCkrLSuzsLZFLcGo2NCq4HNV4kEjodsXlR6q%2FUmAZwjQYR8QI9LVvR2pTeGxIJFhnahZs1KG0&xck=gje%2BhxaEtSAuHbrCmo5aoNi%2Fs8ECkzDbtNF53iMrdty82nXAPPs8QNg7IvrXpZrl%2FBL%2BdD5geroLCVY6je7zQH7TXkCJFQix%2BM26lDwLdNLeYTnARtw61u5m6EbMfbQkBS661KG3jkkthv2nCOyMUUrgINr9J2jGwa6Pe49j%2FzI%3D&xck_channel=default', headers=headers, data=data)
    print(response.json())

if __name__=='__main__':
    sign()